" encoding
set encoding=utf-8

" flip paste mode
nnoremap <F4> :set invpaste paste?<CR>

" Edit and apply vimrc
nnoremap <F5> :<C-u>edit $MYVIMRC<CR>
nnoremap <F6> :<C-u>source $MYVIMRC<CR>

syntax on
set visualbell t_vb=
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set nocompatible
set number
set hidden

colorscheme Tomorrow-Night-Bright

set backspace=indent,eol,start " backspace deletes indent and end-of-line

set hlsearch
set incsearch
set ignorecase
set smartcase

nmap  :nohlsearch

set directory=~/.vimbackups " the directory to save swap files
set backupdir=~/.vimbackups

" Copy the text selected visually into clipboard register
set guioptions+=a
" Insert yanking text into clipboard
set clipboard+=unnamed


" Remove right side spaces
function! RTrim()
  let s:cursor = getpos(".")
  %s/¥s¥+$//e
  call setpos(".", s:cursor)
endfunction
autocmd BufWritePre * call RTrim()

" Change cursor color with IME state
if has('multi_byte_ime')
  highlight CursorIM guifg=NONE guibg=Red
endif

set laststatus=2
set statusline=%<%f\ %m%r%h%w
set statusline+=%{'['.(&fenc!=''?&fenc:&enc).']['.&fileformat.']'}
set statusline+=%=%l/%L,%c%V%8P

" No octal number format
set nrformats-=octal

au BufRead,BufNewFile *.scala set filetype=scala
au BufRead,BufNewFile *.ts set filetype=typescript
au BufRead,BufNewFile *.json set filetype=javascript

"vim-plug
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'Shougo/unite.vim'
Plug 'Shougo/neocomplete'
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
Plug 'rbgrouleff/bclose.vim'
Plug 'bufexplorer.zip'
Plug 'honza/vim-snippets'
Plug 'mattn/emmet-vim'
Plug 'othree/html5.vim'
Plug 'godlygeek/csapprox'
Plug 'fatih/vim-go'
Plug 'google/vim-ft-go'
Plug 'vim-jp/vim-go-extra'
Plug 'jiangmiao/auto-pairs'
Plug 'AndrewRadev/switch.vim'
Plug 'tpope/vim-endwise'
Plug 'vim-scripts/ruby-matchit'
Plug 'scrooloose/syntastic'

call plug#end()

" Syntastic
" RubyのチェックをRuboCopで行います。
let g:syntastic_ruby_checkers = ['rubocop']

" ファイルのオープン時もチェックを実行します。
" 保存時のみチェックをする場合は、0を指定します。
let g:syntastic_check_on_open = 1

" 「mode」にpassiveを指定すると、「:SyntasticCheck」を実行したときのみチェックが実行されます。
" 「mode」にpassiveを指定し、あわせて「active_filetypes」を指定することで、例外条件を設定します。
" 以下のように指定すると、Rubyの場合のみファイルの保存時(オープン時)に自動でチェックが実行されます。
let g:syntastic_mode_map = { "mode": "passive",
            \"active_filetypes": ["ruby"],
            \"passive_filetypes": [] }"

" unite.vim
" reference: http://d.hatena.ne.jp/ruedap/20110110/vim_unite_plugin
"
" enable at input mode
let g:unite_enable_start_insert=1
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" files
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" registers
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" recently file lists
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" all
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
" splits
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" End by double ESC
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>qu

" neocomplete
let g:neocomplete#enable_at_startup = 1

" neosnippet
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

let g:neosnippet#snippets_directory='~/.vim/plugged/vim-snippets/snippets'
" neosnippet end

" bufexplorer
nmap <C-b> \be

" load sources
source ~/.vim/sources/perl.vim
source ~/.vim/sources/go.vim
